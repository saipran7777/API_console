(function(Prism){function simple_form(name){return new RegExp("(\\()"+name+"(?=[\\s\\)])")}function primitive(pattern){return new RegExp("([\\s([])"+pattern+"(?=[\\s)])")}var symbol="[-+*/_~!@$%^=<>{}\\w]+",par="(\\()",endpar="(?=\\))",space="(?=\\s)",language={heading:{pattern:/;;;.*/,alias:["comment","title"]},comment:/;.*/,string:{pattern:/"(?:[^"\\]*|\\.)*"/,greedy:!0,inside:{argument:/[-A-Z]+(?=[.,\s])/,symbol:/`[-+*\/_~!@$%^=<>{}\w]+'/}},"quoted-symbol":{pattern:/#?'[-+*\/_~!@$%^=<>{}\w]+/,alias:["variable","symbol"]},"lisp-property":{pattern:/:[-+*\/_~!@$%^=<>{}\w]+/,alias:"property"},splice:{pattern:/,@?[-+*\/_~!@$%^=<>{}\w]+/,alias:["symbol","variable"]},keyword:[{pattern:new RegExp(par+"(?:(?:lexical-)?let\\*?|(?:cl-)?letf|if|when|while|unless|cons|cl-loop|and|or|not|cond|setq|error|message|null|require|provide|use-package)"+space),lookbehind:!0},{pattern:new RegExp(par+"(?:for|do|collect|return|finally|append|concat|in|by)"+space),lookbehind:!0}],declare:{pattern:simple_form("declare"),lookbehind:!0,alias:"keyword"},interactive:{pattern:simple_form("interactive"),lookbehind:!0,alias:"keyword"},boolean:{pattern:primitive("(?:t|nil)"),lookbehind:!0},number:{pattern:primitive("[-+]?\\d+(?:\\.\\d*)?"),lookbehind:!0},defvar:{pattern:new RegExp(par+"def(?:var|const|custom|group)\\s+"+symbol),lookbehind:!0,inside:{keyword:/^def[a-z]+/,variable:/[-+*\/_~!@$%^=<>{}\w]+/}},defun:{pattern:new RegExp(par+"(?:cl-)?(?:defun\\*?|defmacro)\\s+"+symbol+"\\s+\\([\\s\\S]*?\\)"),lookbehind:!0,inside:{keyword:/^(?:cl-)?def\S+/,arguments:null,function:{pattern:/(^\s)[-+*\/_~!@$%^=<>{}\w]+/,lookbehind:!0},punctuation:/[()]/}},lambda:{pattern:new RegExp(par+"lambda\\s+\\((?:&?"+symbol+"\\s*)*\\)"),lookbehind:!0,inside:{keyword:/^lambda/,arguments:null,punctuation:/[()]/}},car:{pattern:new RegExp(par+symbol),lookbehind:!0},punctuation:[/(['`,]?\(|[)\[\]])/,{pattern:/(\s)\.(?=\s)/,lookbehind:!0}]},arg={"lisp-marker":new RegExp("&"+symbol),rest:{argument:{pattern:/[-+*\/_~!@$%^=<>{}\w]+/,alias:"variable"},varform:{pattern:new RegExp(par+symbol+"\\s+\\S[\\s\\S]*"+endpar),lookbehind:!0,inside:{string:language.string,boolean:language.boolean,number:language.number,symbol:language.symbol,punctuation:/[()]/}}}},forms="\\S+(?:\\s+\\S+)*",arglist={pattern:new RegExp(par+"[\\s\\S]*"+endpar),lookbehind:!0,inside:{"rest-vars":{pattern:new RegExp("&(?:rest|body)\\s+"+forms),inside:arg},"other-marker-vars":{pattern:new RegExp("&(?:optional|aux)\\s+"+forms),inside:arg},keys:{pattern:new RegExp("&key\\s+"+forms+"(?:\\s+&allow-other-keys)?"),inside:arg},argument:{pattern:/[-+*\/_~!@$%^=<>{}\w]+/,alias:"variable"},punctuation:/[()]/}};language.lambda.inside.arguments=arglist;language.defun.inside.arguments=Prism.util.clone(arglist);language.defun.inside.arguments.inside.sublist=arglist;Prism.languages.lisp=language;Prism.languages.elisp=language;Prism.languages.emacs=language;Prism.languages["emacs-lisp"]=language})(Prism);